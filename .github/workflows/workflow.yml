name: Deploy Spring Boot to VPS

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 🧱 1. Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v4

      # ☕ 2. Configuration de Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # 🧰 3. Build du projet
      - name: Build with Maven
        run: |
          set -e
          mvn clean package -DskipTests

      # 🔍 4. Vérification du dossier target/
      - name: Check build output
        run: |
          ls -lah target
          if [ ! -f target/*.jar ]; then
            echo "❌ Aucun fichier JAR trouvé!"
            exit 1
          fi

      # 📦 5. Copie du fichier .jar sur le VPS
      - name: Copy JAR to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: "target/*.jar"
          target: "/root/dvente-api"
          strip_components: 1
          timeout: 300s

      # 🚀 6. Déploiement sur le VPS
      - name: Deploy on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          timeout: 300s
          script: |
            set -e
            cd /root/dvente-api
            
            echo "➡️ Déploiement en cours sur le VPS..."
            
            # Vérification que le fichier JAR existe
            JAR_FILE=$(ls -1 *.jar 2>/dev/null | head -n 1)
            if [ -z "$JAR_FILE" ]; then
              echo "❌ Aucun fichier JAR trouvé dans /root/dvente-api"
              exit 1
            fi
            
            echo "📦 Fichier JAR détecté: $JAR_FILE"
            
            # Sauvegarde de l'ancienne version si elle existe
            if [ -f app.jar ]; then
              echo "💾 Sauvegarde de l'ancienne version..."
              TIMESTAMP=$(date +%Y%m%d_%H%M%S)
              mv app.jar "app.jar.backup_$TIMESTAMP"
            
              # Garder seulement les 3 dernières sauvegardes
              ls -t app.jar.backup_* 2>/dev/null | tail -n +4 | xargs -r rm
            fi
            
            # Renommer le nouveau jar
            mv "$JAR_FILE" app.jar
            
            echo "🔄 Redémarrage du service springboot-app..."
            systemctl restart springboot-app
            
            # Attendre le démarrage
            echo "⏳ Attente du démarrage de l'application..."
            sleep 15
            
            # Vérification du statut du service
            if systemctl is-active --quiet springboot-app; then
              echo "✅ Service démarré avec succès!"
              systemctl status springboot-app --no-pager
            else
              echo "❌ Échec du démarrage du service!"
              echo "📋 Logs du service:"
              journalctl -u springboot-app -n 50 --no-pager
              exit 1
            fi

      # 🎉 7. Notification de succès
      - name: Deployment successful
        if: success()
        run: echo "🎉 Déploiement réussi sur le VPS!"

      # ⚠️ 8. Notification d'échec
      - name: Deployment failed
        if: failure()
        run: |
          echo "❌ Le déploiement a échoué. Vérifiez les logs ci-dessus."
          exit 1